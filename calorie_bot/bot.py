"""Telegram bot entrypoint."""

from __future__ import annotations

import logging
from datetime import date, datetime, timedelta
from enum import Enum, auto
from typing import Any, Optional

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.constants import ParseMode
from telegram.ext import (
    AIORateLimiter,
    Application,
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)

try:  # pragma: no cover - import fallback for running as a script
    from .calculations import ActivityLevel, Goal, Sex, build_metrics
    from .config import get_settings
    from .llm import (
        MealAnalysis,
        analyze_meal_from_image,
        analyze_meal_from_text,
        request_day_summary,
    )
    from .storage import Storage, User
except ImportError:  # pragma: no cover - allows "python bot.py" execution
    from calculations import ActivityLevel, Goal, Sex, build_metrics
    from config import get_settings
    from llm import (
        MealAnalysis,
        analyze_meal_from_image,
        analyze_meal_from_text,
        request_day_summary,
    )
    from storage import Storage, User


LOGGER = logging.getLogger(__name__)


class RegistrationState(Enum):
    AGE = auto()
    SEX = auto()
    HEIGHT = auto()
    WEIGHT = auto()
    ACTIVITY = auto()
    GOAL = auto()


class LogState(Enum):
    CHOOSE_DAY = auto()
    CHOOSE_MEAL = auto()
    CHOOSE_ENTRY_TYPE = auto()
    ENTER_TEXT = auto()
    ENTER_PHOTO = auto()
    CONFIRM = auto()
    CORRECTION_TEXT = auto()


MEAL_TYPES = {
    "breakfast": "–ó–∞–≤—Ç—Ä–∞–∫",
    "lunch": "–û–±–µ–¥",
    "dinner": "–£–∂–∏–Ω",
    "snack": "–ü–µ—Ä–µ–∫—É—Å",
}

ENTRY_TYPES = {
    "text": "–¢–µ–∫—Å—Ç",
    "image": "–§–æ—Ç–æ",
}

ACTIVITY_OPTIONS = {
    "sedentary": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞)",
    "light": "–õ–µ–≥–∫–∞—è (1-3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)",
    "moderate": "–°—Ä–µ–¥–Ω—è—è (3-5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)",
    "high": "–í—ã—Å–æ–∫–∞—è (6-7 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)",
    "very_high": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥ + —Å–ø–æ—Ä—Ç)",
}

GOAL_OPTIONS = {
    "lose": "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
    "maintain": "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ",
    "gain": "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã",
}


class CalorieBot:
    def __init__(self) -> None:
        settings = get_settings()
        self.storage = Storage(settings.database_path)
        self.main_menu = ReplyKeyboardMarkup(
            [
                ["/log_day üçΩ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–µ–Ω—å"],
                ["/finish_day ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å"],
                ["/stats üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "/profile üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"],
            ],
            resize_keyboard=True,
        )
        builder = Application.builder().token(settings.telegram_token)
        try:
            builder = builder.rate_limiter(AIORateLimiter())
        except RuntimeError as exc:  # pragma: no cover - depends on optional dependency
            LOGGER.warning("Rate limiter disabled: %s", exc)
        self.application = builder.build()
        self._register_handlers()

    # ------------------------------------------------------------------
    # Helper methods
    # ------------------------------------------------------------------
    def _get_user(self, telegram_id: int) -> Optional[User]:
        return self.storage.get_user(telegram_id)

    def _ensure_user(self, update: Update) -> Optional[User]:
        telegram_id = update.effective_user.id if update.effective_user else None
        if not telegram_id:
            return None
        user = self._get_user(telegram_id)
        if not user:
            update.message.reply_text(
                "–ß—Ç–æ–±—ã –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å."
            )
            return None
        return user

    def _set_active_log(self, user: User, context: CallbackContext, log_day: date) -> int:
        day_log_id = self.storage.set_active_day(user.telegram_id, log_day)
        context.user_data["log_date"] = log_day
        context.user_data["day_log_id"] = day_log_id
        context.user_data["active_day_info"] = {"id": day_log_id, "day": log_day}
        return day_log_id

    # ------------------------------------------------------------------
    # Registration flow
    # ------------------------------------------------------------------
    async def start(self, update: Update, context: CallbackContext) -> int:
        telegram_id = update.effective_user.id
        user = self._get_user(telegram_id)
        if user:
            await update.message.reply_text(
                "–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å! –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–¥–Ω–µ–≤–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–∞–ø–∏—Å—è–º.\n"
                "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
                "‚Ä¢ /log_day ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏\n"
                "‚Ä¢ /finish_day ‚Äî –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è\n"
                "‚Ä¢ /stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
                "‚Ä¢ /profile ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                reply_markup=self.main_menu,
            )
            return ConversationHandler.END

        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitRose! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥ –≤–∞—Å ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
            "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?"
        )
        return RegistrationState.AGE

    async def registration_age(self, update: Update, context: CallbackContext) -> RegistrationState:
        try:
            age = int(update.message.text)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 29.")
            return RegistrationState.AGE

        if not 0 < age <= 120:
            await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 120 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return RegistrationState.AGE

        context.user_data["registration"] = {"age": age}
        keyboard = [["–ú"], ["–ñ"]]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–µ–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
        )
        return RegistrationState.SEX

    async def registration_sex(self, update: Update, context: CallbackContext) -> RegistrationState:
        sex_value = update.message.text.strip().lower()
        if sex_value not in {"–º", "–∂"}:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –ú –∏–ª–∏ –ñ –Ω–∏–∂–µ.")
            return RegistrationState.SEX

        context.user_data["registration"]["sex"] = Sex.MALE if sex_value == "–º" else Sex.FEMALE
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 172).", reply_markup=ReplyKeyboardRemove())
        return RegistrationState.HEIGHT

    async def registration_height(self, update: Update, context: CallbackContext) -> RegistrationState:
        try:
            height = float(update.message.text.replace(",", "."))
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 175.")
            return RegistrationState.HEIGHT

        if not 50 <= height <= 250:
            await update.message.reply_text("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 50‚Äì250 —Å–º. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?")
            return RegistrationState.HEIGHT

        context.user_data["registration"]["height"] = height
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 68.5).")
        return RegistrationState.WEIGHT

    async def registration_weight(self, update: Update, context: CallbackContext) -> RegistrationState:
        try:
            weight = float(update.message.text.replace(",", "."))
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5.")
            return RegistrationState.WEIGHT

        if not 30 <= weight <= 400:
            await update.message.reply_text("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 30‚Äì400 –∫–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return RegistrationState.WEIGHT

        context.user_data["registration"]["weight"] = weight
        keyboard = [[label] for label in ACTIVITY_OPTIONS.values()]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
        )
        return RegistrationState.ACTIVITY

    async def registration_activity(self, update: Update, context: CallbackContext) -> RegistrationState:
        selected = update.message.text.strip()
        for key, label in ACTIVITY_OPTIONS.items():
            if selected == label:
                context.user_data["registration"]["activity"] = ActivityLevel(key)
                break
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.")
            return RegistrationState.ACTIVITY

        keyboard = [[label] for label in GOAL_OPTIONS.values()]
        await update.message.reply_text(
            "–ö–∞–∫–∞—è —Ü–µ–ª—å —Å–µ–π—á–∞—Å –±–ª–∏–∂–µ –≤—Å–µ–≥–æ?",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
        )
        return RegistrationState.GOAL

    async def registration_goal(self, update: Update, context: CallbackContext) -> int:
        selected = update.message.text.strip()
        for key, label in GOAL_OPTIONS.items():
            if selected == label:
                context.user_data["registration"]["goal"] = Goal(key)
                break
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
            return RegistrationState.GOAL

        data = context.user_data.pop("registration")
        telegram_id = update.effective_user.id
        metrics = build_metrics(
            weight=data["weight"],
            height=data["height"],
            age=data["age"],
            sex=data["sex"],
            activity=data["activity"],
            goal=data["goal"],
        )
        user = User(
            telegram_id=telegram_id,
            age=data["age"],
            sex=data["sex"],
            height=data["height"],
            weight=data["weight"],
            activity=data["activity"],
            goal=data["goal"],
            metrics=metrics,
        )
        self.storage.upsert_user(user)

        await update.message.reply_text(
            self._format_user_profile(user), parse_mode=ParseMode.MARKDOWN
        )
        await update.message.reply_text(
            "–ü—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤! –í–Ω–∏–∑—É ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏: –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏, –∑–∞–≤–µ—Ä—à–∞–π—Ç–µ –¥–µ–Ω—å –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.",
            reply_markup=self.main_menu,
        )
        return ConversationHandler.END

    # ------------------------------------------------------------------
    # Logging meals
    # ------------------------------------------------------------------
    async def log_day_start(self, update: Update, context: CallbackContext) -> LogState:
        user = self._ensure_user(update)
        if not user:
            return ConversationHandler.END

        context.user_data["current_user"] = user
        active_day = self.storage.get_active_day(user.telegram_id)
        if active_day:
            context.user_data["active_day_info"] = active_day
            intro = (
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ–Ω—å {self._format_day_label(active_day['day'])}! "
                "–ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É."
            )
        else:
            context.user_data.pop("active_day_info", None)
            intro = "–ù–∞—á–∏–Ω–∞–µ–º –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å."

        await update.message.reply_text(intro, reply_markup=self.main_menu)

        buttons = []
        if active_day:
            buttons.append([InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å", callback_data="day_current")])
        buttons.append(
            [
                InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="day_today"),
                InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="day_other"),
            ]
        )
        keyboard = InlineKeyboardMarkup(buttons)
        await update.message.reply_text("–ö–∞–∫–æ–π –¥–µ–Ω—å —Ñ–∏–∫—Å–∏—Ä—É–µ–º?", reply_markup=keyboard)
        return LogState.CHOOSE_DAY

    async def log_day_choose_day(self, update: Update, context: CallbackContext) -> LogState:
        query = update.callback_query
        await query.answer()
        user = context.user_data.get("current_user")
        if not user:
            await query.edit_message_text("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /log_day.")
            return ConversationHandler.END

        if query.data == "day_current":
            active_info = context.user_data.get("active_day_info")
            if not active_info:
                await query.edit_message_text("–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /log_day.")
                return ConversationHandler.END
            selected_date = active_info["day"]
            self._set_active_log(user, context, selected_date)
            await query.edit_message_text(
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ–Ω—å {self._format_day_label(selected_date)}."
            )
            return await self._prompt_meal_type(query.message, context)

        if query.data == "day_today":
            selected_date = date.today()
            self._set_active_log(user, context, selected_date)
            await query.edit_message_text(
                f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: {selected_date.strftime('%d.%m.%Y')}"
            )
            return await self._prompt_meal_type(query.message, context)

        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return LogState.CHOOSE_DAY

    async def log_day_receive_date(self, update: Update, context: CallbackContext) -> LogState:
        text = update.message.text.strip()
        try:
            selected_date = datetime.strptime(text, "%Y-%m-%d").date()
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ì–ì–ì–ì-–ú–ú-–î–î).")
            return LogState.CHOOSE_DAY

        user = context.user_data.get("current_user")
        if not user:
            await update.message.reply_text("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /log_day –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END

        self._set_active_log(user, context, selected_date)
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: {selected_date.strftime('%d.%m.%Y')}"
        )
        return await self._prompt_meal_type(update.message, context)

    async def _prompt_meal_type(self, message, context: CallbackContext) -> LogState:
        log_date: Optional[date] = context.user_data.get("log_date")
        day_label = self._format_day_label(log_date) if log_date else "–≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å"
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton(label, callback_data=f"meal_{key}")]
                for key, label in MEAL_TYPES.items()
            ]
        )
        await message.reply_text(
            f"–ö–∞–∫–æ–π –ø—Ä–∏—ë–º –ø–∏—â–∏ –¥–æ–±–∞–≤–∏–º –¥–ª—è {day_label}?",
            reply_markup=keyboard,
        )
        return LogState.CHOOSE_MEAL

    async def log_day_choose_meal(self, update: Update, context: CallbackContext) -> LogState:
        query = update.callback_query
        await query.answer()
        data = query.data.replace("meal_", "")
        if data not in MEAL_TYPES:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏.")
            return ConversationHandler.END

        context.user_data["meal_type"] = data
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("–¢–µ–∫—Å—Ç", callback_data="entry_text"),
                    InlineKeyboardButton("–§–æ—Ç–æ", callback_data="entry_image"),
                ]
            ]
        )
        await query.edit_message_text(
            "–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—ë–º: —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–æ—Ç–æ?",
            reply_markup=keyboard,
        )
        return LogState.CHOOSE_ENTRY_TYPE

    async def log_day_entry_type(self, update: Update, context: CallbackContext) -> LogState:
        query = update.callback_query
        await query.answer()
        entry_type = query.data.replace("entry_", "")
        if entry_type not in ENTRY_TYPES:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø–∏—Å–∏.")
            return ConversationHandler.END

        context.user_data["entry_type"] = entry_type
        if entry_type == "text":
            await query.edit_message_text(
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ –≤ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ø–æ–¥—Å—á—ë—Ç!"
            )
            return LogState.ENTER_TEXT

        await query.edit_message_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å —Å –¥–µ—Ç–∞–ª—è–º–∏, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏."
        )
        return LogState.ENTER_PHOTO

    async def log_day_receive_text(self, update: Update, context: CallbackContext) -> LogState:
        description = update.message.text
        return await self._handle_meal_input(update, context, description=description, photo_bytes=None)

    async def log_day_receive_photo(self, update: Update, context: CallbackContext) -> LogState:
        if not update.message.photo:
            await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å. –ü—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return LogState.ENTER_PHOTO

        photo = update.message.photo[-1]
        file = await photo.get_file()
        image_bytes = await file.download_as_bytearray()
        description = update.message.caption or ""
        return await self._handle_meal_input(update, context, description=description, photo_bytes=bytes(image_bytes))

    async def _handle_meal_input(
        self,
        update: Update,
        context: CallbackContext,
        *,
        description: str,
        photo_bytes: Optional[bytes],
    ) -> LogState:
        message = update.message
        try:
            if photo_bytes:
                analysis = analyze_meal_from_image(description, photo_bytes)
            else:
                analysis = analyze_meal_from_text(description)
        except Exception as exc:  # pragma: no cover - network errors
            LOGGER.exception("LLM request failed")
            await message.reply_text(
                "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑ ‚Äî –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å—ë –ø–æ—Å—á–∏—Ç–∞–µ–º!"
            )
            return LogState.ENTER_TEXT if not photo_bytes else LogState.ENTER_PHOTO

        context.user_data["analysis"] = analysis
        context.user_data["user_input"] = description
        await message.reply_text(self._format_analysis(analysis), parse_mode=ParseMode.MARKDOWN)
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
                    InlineKeyboardButton("–ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_edit"),
                ]
            ]
        )
        await message.reply_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—á—ë—Ç –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ:", reply_markup=keyboard)
        return LogState.CONFIRM

    async def log_day_confirm(self, update: Update, context: CallbackContext) -> LogState:
        query = update.callback_query
        await query.answer()
        choice = query.data
        if choice == "confirm_yes":
            await query.edit_message_text("–°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–ø–∏—Å—å... ‚úÖ")
            await self._persist_meal(context)
            await query.message.reply_text(
                "–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏—ë–º –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π –≤–Ω–∏–∑—É.",
                reply_markup=self.main_menu,
            )
            return await self._prompt_meal_type(query.message, context)

        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–ª—é–¥–µ —Ç–µ–∫—Å—Ç–æ–º.")
        return LogState.CORRECTION_TEXT

    async def log_day_correction(self, update: Update, context: CallbackContext) -> LogState:
        text = update.message.text
        try:
            analysis = analyze_meal_from_text(text)
        except Exception:
            await update.message.reply_text(
                "–ü–æ–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—â—ë —Ä–∞–∑."
            )
            return LogState.CORRECTION_TEXT

        context.user_data["analysis"] = analysis
        context.user_data["user_input"] = text
        await update.message.reply_text(self._format_analysis(analysis), parse_mode=ParseMode.MARKDOWN)
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
                    InlineKeyboardButton("–ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_edit"),
                ]
            ]
        )
        await update.message.reply_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—á—ë—Ç –∏–ª–∏ –≤–Ω–µ—Å–∏—Ç–µ –ø—Ä–∞–≤–∫–∏:", reply_markup=keyboard)
        return LogState.CONFIRM

    async def _persist_meal(self, context: CallbackContext) -> None:
        user: User = context.user_data["current_user"]
        log_date: date = context.user_data["log_date"]
        meal_type: str = context.user_data["meal_type"]
        entry_type: str = context.user_data["entry_type"]
        analysis: MealAnalysis = context.user_data["analysis"]
        user_input: str = context.user_data.get("user_input", "")

        day_log_id = context.user_data.get("day_log_id")
        if not day_log_id:
            day_log_id = self._set_active_log(user, context, log_date)
        self.storage.add_meal_entry(
            day_log_id=day_log_id,
            meal_type=meal_type,
            entry_type=entry_type,
            user_input=user_input,
            llm_payload=analysis.to_dict(),
            corrected_payload=None,
        )

    # ------------------------------------------------------------------
    # Finish day
    # ------------------------------------------------------------------
    async def finish_day(self, update: Update, context: CallbackContext) -> None:
        user = self._ensure_user(update)
        if not user:
            return

        active_day = self.storage.get_active_day(user.telegram_id)
        if not active_day:
            await update.message.reply_text(
                "–°–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–Ω—è. –ù–∞–∂–º–∏—Ç–µ ¬´/log_day üçΩ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–µ–Ω—å¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.",
                reply_markup=self.main_menu,
            )
            return

        selected_date: date = active_day["day"]
        await update.message.reply_text(
            f"–ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –∑–∞ {selected_date.strftime('%d.%m.%Y')}...",
            reply_markup=self.main_menu,
        )
        success = await self._summarize_day(update.message, user, selected_date)
        if success:
            self.storage.close_day(user.telegram_id, selected_date)
            context.user_data.pop("log_date", None)
            context.user_data.pop("day_log_id", None)
            context.user_data.pop("active_day_info", None)
            await update.message.reply_text(
                "–î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç–¥—ã—Ö–∞–π—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.",
                reply_markup=self.main_menu,
            )

    async def _summarize_day(self, message, user: User, selected_date: date) -> bool:
        summary = self.storage.get_day_summary(user.telegram_id, selected_date)
        if not summary:
            await message.reply_text("–ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏—ë–º –ø–∏—â–∏, —á—Ç–æ–±—ã –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏.")
            return False

        totals = summary["totals"]
        target = {
            "calories": user.metrics.calorie_target,
            "protein": user.metrics.protein_target_g,
            "fat": user.metrics.fat_target_g,
            "carbs": user.metrics.carb_target_g,
        }
        try:
            recommendations = request_day_summary(target, totals)
        except Exception:
            await message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å —á—É—Ç—å –ø–æ–∑–∂–µ."
            )
            return False

        await message.reply_text(
            self._format_day_summary(summary, target, recommendations),
            parse_mode=ParseMode.MARKDOWN,
        )
        return True

    # ------------------------------------------------------------------
    # Statistics
    # ------------------------------------------------------------------
    async def stats(self, update: Update, context: CallbackContext) -> None:
        user = self._ensure_user(update)
        if not user:
            return

        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="stats_week"),
                    InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="stats_month"),
                ]
            ]
        )
        await update.message.reply_text(
            "–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É?",
            reply_markup=keyboard,
        )

    async def stats_callback(self, update: Update, context: CallbackContext) -> None:
        query = update.callback_query
        await query.answer()
        user = self._get_user(query.from_user.id)
        if not user:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return

        if query.data == "stats_week":
            end = date.today()
            start = end - timedelta(days=6)
            label = "–Ω–µ–¥–µ–ª—é"
        else:
            end = date.today()
            start = end - timedelta(days=29)
            label = "–º–µ—Å—è—Ü"

        rows = list(self.storage.iter_period_totals(user.telegram_id, start, end))
        if not rows:
            await query.edit_message_text("–ü–æ–∫–∞ —á—Ç–æ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!")
            return

        text_lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {label} ({start.isoformat()} ‚Äî {end.isoformat()}):"]
        total_calories = sum(row["total_calories"] for row in rows)
        total_protein = sum(row["total_protein"] for row in rows)
        total_fat = sum(row["total_fat"] for row in rows)
        total_carbs = sum(row["total_carbs"] for row in rows)
        text_lines.append(
            f"–í—Å–µ–≥–æ: {total_calories:.0f} –∫–∫–∞–ª ‚Ä¢ –ë–µ–ª–∫–∏ {total_protein:.0f} –≥ ‚Ä¢ –ñ–∏—Ä—ã {total_fat:.0f} –≥ ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã {total_carbs:.0f} –≥"
        )
        for row in rows:
            text_lines.append(
                f"{row['day']}: {row['total_calories']:.0f} –∫–∫–∞–ª (–ë {row['total_protein']:.0f} –≥ / –ñ {row['total_fat']:.0f} –≥ / –£ {row['total_carbs']:.0f} –≥)"
            )

        await query.edit_message_text("\n".join(text_lines))

    # ------------------------------------------------------------------
    # Profile
    # ------------------------------------------------------------------
    async def profile(self, update: Update, context: CallbackContext) -> None:
        user = self._ensure_user(update)
        if not user:
            return
        await update.message.reply_text(
            self._format_user_profile(user), parse_mode=ParseMode.MARKDOWN
        )
        await update.message.reply_text(
            "–ú–µ–Ω—é –Ω–∏–∂–µ –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å.",
            reply_markup=self.main_menu,
        )

    # ------------------------------------------------------------------
    # Formatting helpers
    # ------------------------------------------------------------------
    def _format_user_profile(self, user: User) -> str:
        metrics = user.metrics
        return (
            "‚ú® *–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å*\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user.age} –ª–µ—Ç\n"
            f"–ü–æ–ª: {'–ú' if user.sex is Sex.MALE else '–ñ'}\n"
            f"–†–æ—Å—Ç: {user.height:.0f} —Å–º\n"
            f"–í–µ—Å: {user.weight:.1f} –∫–≥\n"
            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {ACTIVITY_OPTIONS[user.activity.value]}\n"
            f"–¶–µ–ª—å: {GOAL_OPTIONS[user.goal.value]}\n\n"
            "üéØ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã*\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {metrics.calorie_target:.0f} –∫–∫–∞–ª\n"
            f"–ë–µ–ª–∫–∏: {metrics.protein_target_g:.0f} –≥\n"
            f"–ñ–∏—Ä—ã: {metrics.fat_target_g:.0f} –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {metrics.carb_target_g:.0f} –≥"
        )

    def _format_day_label(self, value: date) -> str:
        today = date.today()
        if value == today:
            return "—Å–µ–≥–æ–¥–Ω—è"
        if value == today - timedelta(days=1):
            return "–≤—á–µ—Ä–∞"
        return value.strftime("%d.%m.%Y")

    def _format_analysis(self, analysis: MealAnalysis) -> str:
        items_text = "\n".join(
            [
                f"‚Ä¢ {item.get('name', '–ü—Ä–æ–¥—É–∫—Ç')}: {item.get('calories', 0):.0f} –∫–∫–∞–ª"
                for item in analysis.items
            ]
        )
        if not items_text:
            items_text = "‚Ä¢ –Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π"
        return (
            "üçΩ *–†–∞–∑–±–æ—Ä –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏*\n"
            f"–≠–Ω–µ—Ä–≥–∏—è: {analysis.calories:.0f} –∫–∫–∞–ª\n"
            f"–ë–µ–ª–∫–∏: {analysis.protein:.0f} –≥\n"
            f"–ñ–∏—Ä—ã: {analysis.fat:.0f} –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {analysis.carbs:.0f} –≥\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞: {analysis.notes or '‚Äî'}\n\n"
            f"–°–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞:\n{items_text}"
        )

    def _format_day_summary(self, summary: dict[str, Any], target: dict[str, float], recommendations: dict[str, Any]) -> str:
        totals = summary["totals"]
        meals = summary["meals"]
        day_date = date.fromisoformat(summary["day"])
        day_label = self._format_day_label(day_date)
        lines = [
            f"‚ú® *–ò—Ç–æ–≥–∏ –∑–∞ {day_label}* ({day_date.strftime('%d.%m.%Y')})",
            f"–¶–µ–ª—å: {target['calories']:.0f} –∫–∫–∞–ª (–ë {target['protein']:.0f} / –ñ {target['fat']:.0f} / –£ {target['carbs']:.0f})",
            f"–§–∞–∫—Ç: {totals['calories']:.0f} –∫–∫–∞–ª (–ë {totals['protein']:.0f} / –ñ {totals['fat']:.0f} / –£ {totals['carbs']:.0f})",
            "\nüç¥ *–ü—Ä–∏—ë–º—ã –ø–∏—â–∏:*",
        ]
        for meal in meals:
            label = MEAL_TYPES.get(meal["meal_type"], meal["meal_type"])
            lines.append(
                f"‚Äî {label}: {meal['calories']:.0f} –∫–∫–∞–ª (–ë {meal['protein']:.0f} / –ñ {meal['fat']:.0f} / –£ {meal['carbs']:.0f})"
            )
        lines.append("\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ—É—á–∞:*")

        summary_text = recommendations.get("summary", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        if isinstance(summary_text, list):
            summary_text = "\n".join(str(item).strip() for item in summary_text if item)
        else:
            summary_text = str(summary_text).strip()
        lines.append(summary_text or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        extra = recommendations.get("recommendations", "")
        if isinstance(extra, list):
            extra_text = "\n".join(str(item).strip() for item in extra if item)
        else:
            extra_text = str(extra).strip()
        if extra_text:
            lines.append(extra_text)
        return "\n".join(lines)

    # ------------------------------------------------------------------
    # Handler registration
    # ------------------------------------------------------------------
    def _register_handlers(self) -> None:
        registration_handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.start)],
            states={
                RegistrationState.AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.registration_age)],
                RegistrationState.SEX: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.registration_sex)],
                RegistrationState.HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.registration_height)],
                RegistrationState.WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.registration_weight)],
                RegistrationState.ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.registration_activity)],
                RegistrationState.GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.registration_goal)],
            },
            fallbacks=[CommandHandler("start", self.start)],
            allow_reentry=True,
        )

        log_handler = ConversationHandler(
            entry_points=[CommandHandler("log_day", self.log_day_start)],
            states={
                LogState.CHOOSE_DAY: [
                    CallbackQueryHandler(self.log_day_choose_day, pattern="^day_"),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.log_day_receive_date),
                ],
                LogState.CHOOSE_MEAL: [CallbackQueryHandler(self.log_day_choose_meal, pattern="^meal_")],
                LogState.CHOOSE_ENTRY_TYPE: [CallbackQueryHandler(self.log_day_entry_type, pattern="^entry_")],
                LogState.ENTER_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.log_day_receive_text)],
                LogState.ENTER_PHOTO: [MessageHandler(filters.PHOTO, self.log_day_receive_photo)],
                LogState.CONFIRM: [CallbackQueryHandler(self.log_day_confirm, pattern="^confirm_")],
                LogState.CORRECTION_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.log_day_correction)],
            },
            fallbacks=[CommandHandler("cancel", self._cancel_log)],
        )

        self.application.add_handler(registration_handler)
        self.application.add_handler(log_handler)
        self.application.add_handler(CommandHandler("finish_day", self.finish_day))
        self.application.add_handler(CommandHandler("stats", self.stats))
        self.application.add_handler(CallbackQueryHandler(self.stats_callback, pattern="^stats_"))
        self.application.add_handler(CommandHandler("profile", self.profile))
        self.application.add_error_handler(self._error_handler)

    async def _cancel_log(self, update: Update, context: CallbackContext) -> int:
        await update.message.reply_text(
            "–í–≤–æ–¥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∏–∂–µ.",
            reply_markup=self.main_menu,
        )
        context.user_data.clear()
        return ConversationHandler.END

    async def _error_handler(self, update: object, context: CallbackContext) -> None:
        LOGGER.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s", context.error)
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text(
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ ‚Äî –º—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è."
            )

    # ------------------------------------------------------------------
    # Entrypoint
    # ------------------------------------------------------------------
    def run(self) -> None:
        self.application.run_polling()


async def _shutdown(application: Application) -> None:  # pragma: no cover - used in __main__
    await application.shutdown()
    await application.stop()


def main() -> None:
    logging.basicConfig(level=logging.INFO)
    bot = CalorieBot()
    bot.run()


if __name__ == "__main__":
    main()
